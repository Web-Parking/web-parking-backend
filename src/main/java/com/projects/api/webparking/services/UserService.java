package com.projects.api.webparking.services;

import com.projects.api.webparking.dtos.CreateOrFindUserDto;
import com.projects.api.webparking.dtos.QrCodeDto;
import com.projects.api.webparking.entities.Occupation;
import com.projects.api.webparking.entities.User;
import com.projects.api.webparking.repositories.OccupationRepository;
import com.projects.api.webparking.repositories.UserRepository;
import com.projects.api.webparking.services.exceptions.EntityNotFoundException;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private OccupationRepository occupationRepository;
    private static final String TEST_QR_CODE = "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";

    public UserService() {
    }

    public User findOrCreateUser(CreateOrFindUserDto userDto) {
        return userRepository.findByEmail(userDto.getEmail()).orElseGet(
                () -> userRepository.save(new User(userDto.getEmail()))
        );
    }

    public Occupation createOccupation(String userId) {
        User user = userRepository.findById(userId).orElseThrow(() -> new EntityNotFoundException("User not found"));
        return occupationRepository.save(new Occupation(user));
    }

    public Occupation getLastOccupation(String userId) {
        return occupationRepository.findLastOccupationByUserId(userId).orElseThrow(() -> new EntityNotFoundException("Occupation not found"));
    }

    public QrCodeDto generateQrCode() {
        QrCodeDto qrCodeDto = new QrCodeDto();
        qrCodeDto.setCodeBase64(UserService.TEST_QR_CODE);
        return qrCodeDto;
    }

    @Transactional
    public void releaseOccupation(String userId, String codeOccupation) {
        userRepository.findById(userId).orElseThrow(() -> new EntityNotFoundException("User not found"));
        //todo add enteredAt no update
        int affectedRows = occupationRepository.updateOccupationSetStatusForCode(Occupation.OccupationStatus.RELEASED, codeOccupation);
        if(affectedRows == 0) {
            throw new EntityNotFoundException("Incorrect Code");
        }
    }
}
